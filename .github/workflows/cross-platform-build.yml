name: 跨平台編譯

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: 編譯 ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        include:
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: arm64

    steps:
      - name: 取得原始碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          architecture: ${{ matrix.arch }}

      - name: 安裝相依套件
        run: npm ci
        timeout-minutes: 10

      - name: 檢查 npm 專案結構
        run: |
          echo "檢查 package.json 中的構建腳本"
          if [ -f "package.json" ]; then
            cat package.json | grep -o '"build":[^,]*' || echo "找不到構建腳本，請確認 package.json 配置"
          else
            echo "找不到 package.json 檔案"
            exit 1
          fi
        shell: bash

      - name: 編譯程式
        run: npm run build
        timeout-minutes: 15

      - name: 打包應用程式 (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "正在打包 Unix 平台應用程式"
          if [ ! -d "./dist" ]; then
            echo "dist 目錄不存在，請確認構建腳本正確生成了輸出檔案"
            exit 1
          fi
          mkdir -p ./dist/app-${{ matrix.os }}-${{ matrix.arch }}
          cp -r ./dist/* ./dist/app-${{ matrix.os }}-${{ matrix.arch }}/ || true
          echo "打包完成"
          
      - name: 打包應用程式 (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "正在打包 Windows 平台應用程式"
          if (-Not (Test-Path -Path "./dist")) {
            Write-Host "dist 目錄不存在，請確認構建腳本正確生成了輸出檔案"
            exit 1
          }
          New-Item -Path ./dist/app-${{ matrix.os }}-${{ matrix.arch }} -ItemType Directory -Force
          Get-ChildItem -Path ./dist -Exclude app-* | Copy-Item -Destination ./dist/app-${{ matrix.os }}-${{ matrix.arch }}/ -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "打包完成"
          
      - name: 上傳編譯結果
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}-${{ matrix.arch }}
          path: ./dist/app-${{ matrix.os }}-${{ matrix.arch }}
          if-no-files-found: error
          retention-days: 5
  
  build-android:
    name: 編譯 Android
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: 取得原始碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 設定 JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: 設定 Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: 'tools platform-tools'
          accept-android-sdk-licenses: 'yes'

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安裝相依套件
        run: npm ci
        timeout-minutes: 10

      - name: 檢查環境
        run: |
          echo "Java 版本:"
          java -version
          echo "Android SDK 路徑:"
          echo $ANDROID_SDK_ROOT
          echo "Android 可用工具:"
          ls -la $ANDROID_SDK_ROOT/tools || echo "沒有 tools 目錄"
          ls -la $ANDROID_SDK_ROOT/platform-tools || echo "沒有 platform-tools 目錄"
          echo "專案結構:"
          ls -la
          if [ -d "android" ]; then
            echo "Android 目錄內容:"
            ls -la android
          else
            echo "找不到 Android 目錄，請確認專案結構"
          fi

      - name: 設定 Android 構建腳本權限
        run: |
          if [ -d "android" ]; then
            if [ -f "./android/gradlew" ]; then
              chmod +x ./android/gradlew
              echo "已設定 gradlew 執行權限"
            else
              echo "找不到 gradlew 檔案，請確認專案結構"
              exit 1
            fi
          else
            echo "Android 目錄不存在，請檢查專案結構"
            exit 1
          fi

      - name: 編譯 Android 應用程式
        run: |
          # 確認 android 目錄存在
          if [ -d "android" ]; then
            cd android
            # 顯示 gradle 版本
            ./gradlew --version
            # 使用詳細模式編譯，以便診斷問題
            ./gradlew --stacktrace --info assembleRelease
          else
            echo "Android 目錄不存在，請檢查專案結構"
            exit 1
          fi
        timeout-minutes: 20
          
      - name: 檢查 APK 是否生成
        run: |
          if [ -d "android/app/build/outputs/apk/release" ]; then
            echo "生成的 APK 檔案:"
            ls -la android/app/build/outputs/apk/release/*.apk || echo "沒有找到 APK 檔案"
          else
            echo "找不到 APK 輸出目錄，編譯可能失敗"
            exit 1
          fi
          
      - name: 上傳 APK
        uses: actions/upload-artifact@v4
        with:
          name: app-android
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error
          retention-days: 5
  
  release:
    name: 發布版本
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 下載所有編譯結果
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 顯示下載的檔案結構
        run: |
          echo "檢查下載的構建產物:"
          find ./artifacts -type f | sort
          echo "總共檔案數量: $(find ./artifacts -type f | wc -l)"

      - name: 建立發布版本
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*
          draft: true
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 